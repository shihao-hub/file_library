# -*- coding: utf-8 -*-
import unittest

# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(799, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 20, 121, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(lambda: self.text_collation())
        self.pushButton.setWhatsThis("自动化地在中文文本和半宽字符（如字母、数字和符号）之间添加适当的空格，"
                                     "确保文本的排版美观且易读。")
        # 鼠标焦点在这个按钮上的时候，弹出 label，浮现帮助文本。

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 799, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "文本整理"))

    def text_collation(self):
        import pyperclip
        import pangu

        pyperclip.copy(pangu.spacing_text(pyperclip.paste()))
        print("文本整理结束，请检查剪切板。")

    def pdf_merger(self, files, out_file):
        import PyPDF2

        # files = []
        # out_file = ""

        if not files or not out_file:
            return

        merger = PyPDF2.PdfMerger()
        for path in files:
            merger.append(path)

        merger.write(out_file)
        merger.close()


class Ui_MainWindow_Test(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_for_pdf_merger(self):
        import PyPDF2

        

        in_files = [
            r"../resources/in0.pdf",
            r"../resources/in1.pdf",
            r"../resources/in2.pdf",
        ]


        out_file = r"../resources/out.pdf"

        Ui_MainWindow().pdf_merger(in_files, out_file)

        out_pdf = PyPDF2.PdfReader(out_file)
        self.assertEqual(len(out_pdf.pages), sum([(len(PyPDF2.PdfReader(e).pages)) for e in in_files]))



if __name__ == '__main__':
    unittest.main()
