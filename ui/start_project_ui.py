# -*- coding: utf-8 -*-
import traceback
from datetime import datetime
import pprint
import re
import unittest
import threading

# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QDateTime, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QMenu, QAction, QMessageBox, QFileDialog

from ui.demo import Ui_MainWindow

DEBUG = True


class MainWindow(Ui_MainWindow):
    def __init__(self, main_window):
        self.main_window = main_window
        self.setupUi(main_window)

        main_window.setWindowFlags(main_window.windowFlags() & ~Qt.WindowMaximizeButtonHint)

        self.pushButton.clicked.connect(lambda: self.text_collation())
        self.pushButton.setContextMenuPolicy(Qt.CustomContextMenu)
        self.pushButton.customContextMenuRequested.connect(self.set_menu_for_pushButton)

        self.pushButton_3.clicked.connect(lambda: self.text_remove_duplicates())
        self.pushButton_3.setContextMenuPolicy(Qt.CustomContextMenu)
        self.pushButton_3.customContextMenuRequested.connect(self.set_menu_for_pushButton_3)

        self.current_time_timer = QTimer()
        self.current_time_timer.timeout.connect(lambda: self.update_current_time(main_window))
        self.current_time_timer.start(1000)  # 设置定时器每秒更新一次
        self.label_2.setStyleSheet("color: black;")
        # self.label_2.setStyleSheet("background-color: white; color: black;")
        # self.label_2.setFixedHeight(40)
        self.label_2.setWordWrap(True)
        # self.label_2.setFont(QFont("微软雅黑", 10))
        # self.label_2.setVisible(True)
        self._set_current_time_for_label_2()

        self.set_menu_actions_callback()

    def callback_for_actionopen(self):
        filename, _ = QFileDialog.getSaveFileName(self.main_window,
                                                  'Save File',
                                                  '',
                                                  'Text Files (*.txt);;All Files (*)')

    def set_menu_actions_callback(self):
        # Test
        self.actionopen.setShortcut("Ctrl+H")
        self.actionopen.triggered.connect(self.callback_for_actionopen)

    def logger(self, msg: str, level=0):
        prefix = (" INFO", "DEBUG", "FATAL")[level]
        self.plainTextEdit_3.appendPlainText("["
                                             + datetime.now().strftime(f"{'%Y-%m-%d %H:%M:%S'[0 if not DEBUG else 9:]}")
                                             + " "
                                             + prefix
                                             + "]:  "
                                             + msg)

    def set_menu_for_pushButton(self, position):
        menu = QMenu(self.pushButton)

        action1 = QAction("仅处理剪切板")
        action1.triggered.connect(lambda: self.text_collation(True))
        menu.addAction(action1)

        menu.exec_(self.pushButton.mapToGlobal(position))

    def set_menu_for_pushButton_3(self, position):
        menu = QMenu(self.pushButton_3)

        action1 = QAction("仅处理剪切板")
        action1.triggered.connect(lambda: self.text_remove_duplicates(True))
        menu.addAction(action1)

        menu.exec_(self.pushButton_3.mapToGlobal(position))

    def update_current_time(self, main_window):
        self._set_current_time_for_label_2()

    def _set_current_time_for_label_2(self):
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.label_2.setText(current_time)

    def text_collation(self, enable_clip=None):

        try:
            import pyperclip
            import pangu

            if enable_clip:
                # 剪切板上的 \n 会被存储为 \r\n 所以会多出字符来
                text = pyperclip.paste()
                res_len = len(text)
                pyperclip.copy(pangu.spacing_text(text))
                del text
            else:
                text = self.plainTextEdit.toPlainText()
                res_len = len(text)
                self.plainTextEdit_2.setPlainText(pangu.spacing_text(text))
                del text
        except:
            print(traceback.format_exc())
        else:
            msg = f"文本整理结束，共处理 {res_len} 个字符。"
            self.logger(msg)
            # QMessageBox.information(self.main_window, "通知", msg)

    def _dedup_for_text_remove_duplicates(self, lines):
        seen = set()
        for line in lines:
            if line not in seen:
                yield line
                seen.add(line)

    def text_remove_duplicates(self, enable_clip=None):
        try:
            import pyperclip
            if enable_clip:
                res = []
                text = pyperclip.paste()
                res_len = len(text)
                lines = re.compile(r"\r*\n").split(text)
                for line in self._dedup_for_text_remove_duplicates(lines):
                    res.append(line)
                # res_len = len(res) - 1 + sum(len(e) for e in res)
                pyperclip.copy("\n".join(res))
                del res, lines, text
            else:
                res = []
                text = pyperclip.paste()
                res_len = len(text)
                lines = re.compile(r"\r*\n").split(self.plainTextEdit.toPlainText())
                for line in self._dedup_for_text_remove_duplicates(lines):
                    res.append(line)
                # res_len = len(res) - 1 + sum(len(e) for e in res)
                self.plainTextEdit_2.setPlainText("\n".join(res))
                del res, lines, text
        except:
            print(traceback.format_exc())
        else:
            msg = f"文本去重结束，共处理 {res_len} 个字符。"
            self.logger(msg)
            # QMessageBox.information(self.main_window, "通知", msg)

    def pdf_merger(self, files, out_file):
        try:
            import PyPDF2

            # files = []
            # out_file = ""

            if not files or not out_file:
                return

            merger = PyPDF2.PdfMerger()
            for path in files:
                merger.append(path)

            merger.write(out_file)
            merger.close()
        except:
            print(traceback.format_exc())
        else:
            print("PDF 合并结束。")


class Ui_MainWindow_Test(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_for_pdf_merger(self):
        import PyPDF2

        in_files = [
            r"../resources/in0.pdf",
            r"../resources/in1.pdf",
            r"../resources/in2.pdf",
        ]

        out_file = r"../resources/out.pdf"

        Ui_MainWindow().pdf_merger(in_files, out_file)

        out_pdf = PyPDF2.PdfReader(out_file)
        self.assertEqual(len(out_pdf.pages), sum([(len(PyPDF2.PdfReader(e).pages)) for e in in_files]))


if __name__ == '__main__':
    unittest.main()
